Finds the piecewise linear feasible region from a set of constraints 
functions (inequalities) derived within the actual problem domain.

    y 'sign' f1(x)
    y 'sign' f2(x)
    :
    y 'sign' fn(x)

where 'sign' can be any inequality sign '<'|'<='|'>'|'>=' and f(x) is the 
constraints function which is either constant, linear or possibly nonlinear

Description
The algorithm makes no assumptions on the specified constraints functions 
which can be either constant, linear or possibly nonlinear. The constraints 
functions are initially represented by anonymous functions which will be 
converted into piecewise linear functions within the specified interval 
xmin<=x<=xmax for the independent variable.
The resolution of the discrete grid is controlled by (dx).

It works out the feasible region by first sorting the sampled functions 
followed by detection of their intersections which will be injected into 
the discrete x-grid so that they can be included in the final feasible 
region boundary. The final feasible region is then found by scanning along 
the discrete x-grid for valid (non-conflicting) constraints.

The output is ultimately a closed piecewise linear boundary B representing 
the feasible region to be used in solving 2-dimensional optimization 
problems.

Possibly multiple feasible regions is not handled which could yield
unexpected results.

Dependencies:
Package: feasrgn

Version : 1.2
Date    : 12/2016
Author  : Jari Repo, University West, jari.repo@hv.se
--------------------------------------------------------------------------

[inequality.m]
Version 1.2, JRE
-renamed class to 'inequality'
-removed the auto-indexing
-replaced lt() and gt() with isNeg() and isPos() respectively
-the signature of the inequality is obtained by getSignature()
-default lhsName and rhsName are set by setDefaultNames()
-the logics related to the inequality sign is now handled by the 
enumeration class ineqsign

[ineqsign.m]
New in Version 1.2
Implementation of an enumeration class for the inequality sign.

[feasrgn.m]
Version 1.2, JRE
-The inequalities now need to be defined in a cell array which allows
feasrgn to automatically number the inequalities according to their 
order of occurence in the cell array
-Improved the scanning algorithm further by utilizing node connectivity
information to ensure that all intersections will be included in the 
final generated boundary
-Colinear boundary segments are automatically removed
-The cell-array with legend string (legStr) is created in feasrgnplot
to keep this class clean from the visualization
-Improved validation of the input
-New method isPtInside to test if a query point q is inside the feasible
region boundary
-New method generateInnerPts to generate a 2-dimensional set of points
inside the feasible region boundary B

[feasrgnplot]
New in Version 1.2
Handle class for visualization of the constraints functions and the 
feasible region. Most style properties can be dynamically specified.

